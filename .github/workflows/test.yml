name: Test

on:
    push:

env:
    CARGO_TERM_COLOR: always

jobs:
    test-cargo:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3
            - name: Rust Cache
              uses: Swatinem/rust-cache@v2.2.1
            - name: Build
              run: cargo build --verbose
            - name: Run tests
              run: cargo test --verbose
              timeout-minutes: 20

    test-npm:
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      node-version: 16.x
                      arch: x64
                    - os: ubuntu-latest
                      node-version: 18.x
                      arch: x64
                    - os: windows-latest
                      node-version: 16.x
                      arch: x64
                    - os: windows-latest
                      node-version: 18.x
                      arch: x64
                    - os: windows-latest
                      node-version: 16.x
                      arch: x86
                    - os: windows-latest
                      node-version: 18.x
                      arch: x86
                    - os: macos-latest
                      node-version: 16.x
                      arch: x64
                    - os: macos-latest
                      node-version: 18.x
                      arch: x64
        runs-on: ${{matrix.os}}
        steps:
            - uses: actions/checkout@v3
            - name: Setup Node.js ${{matrix.node-version}} environment
              uses: actions/setup-node@v3.6.0
              with:
                  node-version: ${{matrix.node-version}}
                  architecture: ${{matrix.arch}}
            - name: Setup java 17
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '17'
                  architecture: ${{matrix.arch}}
            - name: Rust Cache
              uses: Swatinem/rust-cache@v2.2.1
            - name: Cache java definitions
              uses: actions/cache@v3
              with:
                  path: '**/test/javaDefinitions'
                  key: ${{runner.os}}-${{matrix.node-version}}-${{matrix.arch}}-javaDefinitions
            - name: Install
              run: npm ci
            - name: Build
              if: ${{matrix.os != 'windows-latest' || matrix.arch == 'x64'}}
              run: npm run build
            - name: Build (win32)
              if: ${{matrix.os == 'windows-latest' && matrix.arch == 'x86'}}
              run: |
                  rustup target add i686-pc-windows-msvc
                  npm run build -- -- --target i686-pc-windows-msvc
            - name: Run tests
              run: npm run testOnly
              timeout-minutes: 20

            - name: Create test summary
              uses: test-summary/action@dist
              if: always()
              with:
                  show: all
                  paths: testResults.xml
            - name: Create package
              if: ${{matrix.node-version == '18.x'}}
              shell: bash
              run: |
                  node -e 'let p=require("./package.json");p.files.push("dist/*.node");require("fs").writeFileSync("package.json",JSON.stringify(p,null,4))'
                  npm pack
            - name: Upload package
              uses: actions/upload-artifact@v3
              if: ${{matrix.node-version == '18.x'}}
              with:
                  name: java-${{matrix.arch}}-${{matrix.os}}
                  path: java-bridge-*.tgz

    test-linux-aarch64-gnu-binding:
        strategy:
            fail-fast: false
            matrix:
                node-version: [16, 18]
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v3
            - name: Setup Node.js ${{matrix.node-version}} environment
              uses: actions/setup-node@v3.6.0
              with:
                  node-version: ${{matrix.node-version}}
            - name: Setup java 17
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '17'
            - name: Install rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal
                  override: true
                  target: aarch64-unknown-linux-gnu
            - name: Rust Cache
              uses: Swatinem/rust-cache@v2.2.1
            - name: Install cross compile toolchain
              run: |
                  sudo apt-get update
                  sudo apt-get install gcc-multilib -y
                  sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y
            - name: Set linker
              run: |
                  mkdir .cargo
                  printf '[target.aarch64-unknown-linux-gnu]\nlinker = "aarch64-linux-gnu-gcc"\n' >> .cargo/config
            - name: Install
              run: npm ci
            - name: Build
              run: npm run build -- -- --target aarch64-unknown-linux-gnu
            - name: Install test dependencies
              run: npm install
            - name: Init qemu
              run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            - name: Run tests
              uses: addnab/docker-run-action@v3
              timeout-minutes: 180
              with:
                  image: arm64v8/node:${{matrix.node-version}}-bullseye
                  options: -v ${{ github.workspace }}:/github/workspace -w /github/workspace
                  run: |
                      apt-get update
                      apt-get install openjdk-17-jre-headless -y
                      npm config set cache /tmp --global
                      export CI=true
                      npm install
                      npm run testOnly
            - name: Create test summary
              uses: test-summary/action@dist
              if: always()
              with:
                  show: all
                  paths: testResults.xml
            - name: Create package
              if: ${{matrix.node-version == '18'}}
              run: |
                  node -e 'let p=require("./package.json");p.files.push("dist/*.node");require("fs").writeFileSync("package.json",JSON.stringify(p,null,4))'
                  npm pack
            - name: Upload package
              uses: actions/upload-artifact@v3
              if: ${{matrix.node-version == '18'}}
              with:
                  name: java-arm64-ubuntu
                  path: java-bridge-*.tgz

    benchmark:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Setup Node.js environment
              uses: actions/setup-node@v3.6.0
              with:
                  node-version: 16.x
            - uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '17'
            - name: Rust Cache
              uses: Swatinem/rust-cache@v2.2.1
            - name: Install
              run: npm ci
            - name: Run benchmarks
              run: npm run benchmark
              timeout-minutes: 20
